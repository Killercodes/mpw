{"version":3,"sources":["../../lib/pbkdf2.js"],"names":[],"mappings":"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","file":"pbkdf2.js","sourcesContent":["/*! by Tom Thorogood <me@tomthorogood.co.uk> */\n/*! This work is licensed under the Creative Commons Attribution 4.0\nInternational License. To view a copy of this license, visit\nhttp://creativecommons.org/licenses/by/4.0/ or see LICENSE. */\n\n// https://bugzilla.mozilla.org/show_bug.cgi?id=554827\nwindow.pbkdf2 = function () {\n\t// https://github.com/golang/crypto/blob/master/pbkdf2/pbkdf2.go\n\tfunction pbkdf2_js(password, salt, iter, keyLen, hash) {\n\t\tswitch ((hash.name || hash).toUpperCase()) {\n\t\t\tcase \"SHA1\":\n\t\t\t\tvar hashLen = 160 / 8;\n\t\t\t\tbreak;\n\t\t\tcase \"SHA224\":\n\t\t\tcase \"SHA-224\":\n\t\t\t\tvar hashLen = 224 / 8;\n\t\t\t\tbreak;\n\t\t\tcase \"SHA256\":\n\t\t\tcase \"SHA-256\":\n\t\t\t\tvar hashLen = 256 / 8;\n\t\t\t\tbreak;\n\t\t\tcase \"SHA384\":\n\t\t\tcase \"SHA-384\":\n\t\t\t\tvar hashLen = 384 / 8;\n\t\t\t\tbreak;\n\t\t\tcase \"SHA512\":\n\t\t\tcase \"SHA-512\":\n\t\t\t\tvar hashLen = 512 / 8;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlet err = new Error(\"A parameter or an operation is not supported by the underlying object\");\n\t\t\t\terr.name = \"InvalidAccessError\";\n\t\t\t\treturn Promise.reject(err);\n\t\t}\n\t\t\n\t\tlet numBlocks = ((keyLen + hashLen - 1) / hashLen) | 0;\n\t\t\n\t\tlet data     = new Uint8Array(salt.length + 4/*sizeof(uint32)*/);\n\t\tlet dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\t\t\n\t\tdata.set(salt);\n\t\t\n\t\treturn window.crypto.subtle.importKey(\"raw\", password, {\n\t\t\t\tname: \"HMAC\",\n\t\t\t\thash: hash\n\t\t\t}, false/*not extractable*/, [ \"sign\" ]).then(function (key) {\n\t\t\t\tlet dk = new Uint8Array(numBlocks * hashLen);\n\t\t\t\tlet x = Promise.resolve();\n\t\t\t\t\n\t\t\t\tfor (let block = 1, dki = 0; block <= numBlocks; block++, dki += hashLen) {\n\t\t\t\t\tx = x.then(() => dataView.setUint32(salt.length, block, false/*big-endian*/))\n\t\t\t\t\t\t.then(() => window.crypto.subtle.sign({\n\t\t\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\t\t\thash: hash\n\t\t\t\t\t\t}, key, data))\n\t\t\t\t\t\t.then(pdk => (dk.set(new Uint8Array(pdk), dki), pdk));\n\t\t\t\t\t\n\t\t\t\t\tfor (let n = 2; n <= iter; n++) {\n\t\t\t\t\t\tx = x.then(U => window.crypto.subtle.sign({\n\t\t\t\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\t\t\t\thash: hash\n\t\t\t\t\t\t\t}, key, U)).then(function (U) {\n\t\t\t\t\t\t\t\tlet Ux = new Uint8Array(U);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfor (let i = 0; i < Ux.length; i++) {\n\t\t\t\t\t\t\t\t\tdk[dki + i] ^= Ux[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn U;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn x.then(() => dk.subarray(0, keyLen));\n\t\t\t});\n\t}\n\t\n\tif (window.crypto.subtle) {\n\t\treturn function (password, salt, iter, keyLen, hash) {\n\t\t\tlet self = this;\n\t\t\tlet args = arguments;\n\t\t\t\n\t\t\treturn window.crypto.subtle.importKey(\"raw\", password, {\n\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\thash: hash\n\t\t\t\t}, false/*not extractable*/, [ \"deriveBits\" ])\n\t\t\t\t.then(key => window.crypto.subtle.deriveBits({\n\t\t\t\t\tname: \"PBKDF2\",\n\t\t\t\t\tsalt: salt,\n\t\t\t\t\titerations: iter,\n\t\t\t\t\thash: hash\n\t\t\t\t}, key, keyLen * 8))\n\t\t\t\t.then(key => new Uint8Array(key))\n\t\t\t\t.catch(err =>\n\t\t\t\t\t// PBKDF2-HMAC is not supported by the Web Crytpto API if either a\n\t\t\t\t\t// NotSupportedError or a OperationError are emmited\n\t\t\t\t\t(err.name === \"OperationError\" || err.name === \"NotSupportedError\")\n\t\t\t\t\t\t? (window.pbkdf2 = pbkdf2_js).apply(self, args)\n\t\t\t\t\t\t// Limited support for PBKDF2-HMAC-SHA exists if InvalidAccessError\n\t\t\t\t\t\t// is emmited for PBKDF2-HMAC-SHA{256,384,512}\n\t\t\t\t\t\t: (err.name === \"InvalidAccessError\")\n\t\t\t\t\t\t\t? pbkdf2_js.apply(self, args)\n\t\t\t\t\t\t\t: Promise.reject(err));\n\t\t};\n\t} else {\n\t\treturn function (password, salt, iter, keyLen, hash) {\n\t\t\tswitch ((hash.name || hash).toUpperCase()) {\n\t\t\t\tcase \"SHA1\":\n\t\t\t\t\tvar hashAlg = CryptoJS.algo.SHA;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"SHA224\":\n\t\t\t\tcase \"SHA-224\":\n\t\t\t\t\tvar hashAlg = CryptoJS.algo.SHA224;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"SHA256\":\n\t\t\t\tcase \"SHA-256\":\n\t\t\t\t\tvar hashAlg = CryptoJS.algo.SHA256;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"SHA384\":\n\t\t\t\tcase \"SHA-384\":\n\t\t\t\t\tvar hashAlg = CryptoJS.algo.SHA384;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"SHA512\":\n\t\t\t\tcase \"SHA-512\":\n\t\t\t\t\tvar hashAlg = CryptoJS.algo.SHA512;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet err = new Error(\"A parameter or an operation is not supported by the underlying object\");\n\t\t\t\t\terr.name = \"InvalidAccessError\";\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t\t\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t// setImmediate (a 0-delay setTimeout of sorts) is needed\n\t\t\t\t// here so that this code is asynchronous and will not block\n\t\t\t\t// the UI thread\n\t\t\t\twindow.setImmediate(function () {\n\t\t\t\t\t// Create crypto-js WordArrays from Uint8Arrays password and salt\n\t\t\t\t\tpassword = CryptoJS.lib.WordArray.create(password);\n\t\t\t\t\tsalt     = CryptoJS.lib.WordArray.create(salt);\n\t\t\t\t\t\n\t\t\t\t\t// Derive key using PBKDF2 w/ password and salt\n\t\t\t\t\tlet Ckey = CryptoJS.PBKDF2(password, salt, {\n\t\t\t\t\t\tkeySize: keyLen*8/32,\n\t\t\t\t\t\titerations: iter,\n\t\t\t\t\t\thasher: hashAlg\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// Create key array and a DataView representing it\n\t\t\t\t\tlet key     = new Uint8Array(Ckey.words.length * 4/*sizeof(int32)*/);\n\t\t\t\t\tlet keyView = new DataView(key.buffer, key.byteOffset, key.byteLength);\n\t\t\t\t\t\n\t\t\t\t\t// Loop over Ckey.words which are INT32\n\t\t\t\t\tfor (let i = 0; i < Ckey.words.length; i++) {\n\t\t\t\t\t\t// Set key[i*4,i*4+4] to Ckey.words[i] INT32 in big-endian form\n\t\t\t\t\t\tkeyView.setInt32(i * 4/*sizeof(int32)*/, Ckey.words[i], false/*big-endian*/);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Return the key Uint8Array\n\t\t\t\t\tresolve(key);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t}\n}();"]}