{"version":3,"sources":["../../lib/mpw.js"],"names":[],"mappings":"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","file":"mpw.js","sourcesContent":["/*! by Tom Thorogood <me@tomthorogood.co.uk> */\n/*! This work is licensed under the Creative Commons Attribution 4.0\nInternational License. To view a copy of this license, visit\nhttp://creativecommons.org/licenses/by/4.0/ or see LICENSE. */\n\n// JS Web Crypto implementation of http://masterpasswordapp.com/algorithm.html\nclass MPW {\n\tconstructor(name, password, version = MPW.VERSION) {\n\t\t// The algorithm version\n\t\tthis.version = version;\n\t\t\n\t\t// Store name on the object, this is not used at all internally\n\t\tthis.name = name;\n\t\t\n\t\t// Check for valid algorithm versions\n\t\tif (version >= 0 && version <= MPW.VERSION) {\n\t\t\t// Calculate the master key which will be used to calculate\n\t\t\t// the password seed\n\t\t\tthis.key = MPW.calculateKey(name, password, version);\n\t\t} else {\n\t\t\tthis.key = Promise.reject(new Error(`Algorithm version ${version} not implemented`));\n\t\t}\n\t}\n\t\n\t// calculateKey takes ~ 1450.000ms to complete\n\tstatic calculateKey(name, password, version = MPW.VERSION) {\n\t\tif (!name || !name.length) {\n\t\t\treturn Promise.reject(new Error(\"Argument name not present\"));\n\t\t}\n\t\t\n\t\tif (!password || !password.length) {\n\t\t\treturn Promise.reject(new Error(\"Argument password not present\"));\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// Cache the number of characters in name for older buggy\n\t\t\t// versions of MPW\n\t\t\tlet nameCharLength = name.length;\n\t\t\t\n\t\t\t// Convert password string to a Uint8Array w/ UTF-8\n\t\t\tpassword = MPW.txtencoder.encode(password);\n\t\t\t\n\t\t\t// Convert name string to a Uint8Array w/ UTF-8\n\t\t\tname = MPW.txtencoder.encode(name);\n\t\t\t\n\t\t\t// Convert MPW.NS string to a Uint8Array w/ UTF-8\n\t\t\tlet NS = MPW.txtencoder.encode(MPW.NS);\n\t\t\t\n\t\t\t// Create salt array and a DataView representing it\n\t\t\tvar salt = new Uint8Array(\n\t\t\t\tNS.length\n\t\t\t\t+ 4/*sizeof(uint32)*/ + name.length\n\t\t\t);\n\t\t\tlet saltView = new DataView(salt.buffer, salt.byteOffset, salt.byteLength);\n\t\t\tlet i = 0;\n\t\t\t\n\t\t\t// Set salt[0,] to NS\n\t\t\tsalt.set(NS, i); i += NS.length;\n\t\t\t\n\t\t\tif (version < 3) {\n\t\t\t\t// Set data[i,i+4] to nameCharLength UINT32 in big-endian form\n\t\t\t\tsaltView.setUint32(i, nameCharLength, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t} else {\n\t\t\t\t// Set salt[i,i+4] to name.length UINT32 in big-endian form\n\t\t\t\tsaltView.setUint32(i, name.length, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t}\n\t\t\t\n\t\t\t// Set salt[i,] to name\n\t\t\tsalt.set(name, i); i += name.length;\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t\t\n\t\t// Derive the master key w/ scrypt\n\t\t// why is buflen 64*8==512 and not 32*8==256 ?\n\t\tlet key = window.scrypt(password, salt, 32768/*= n*/, 8/*= r*/, 2/*= p*/, 64/*= buflen*/);\n\t\t\n\t\t// If the Web Crypto API is supported import the key, otherwise return\n\t\treturn window.crypto.subtle\n\t\t\t? key.then(\n\t\t\t\t// Import the key into WebCrypto to use later with sign while\n\t\t\t\t// being non-extractable\n\t\t\t\tkey => window.crypto.subtle.importKey(\"raw\", key, {\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t}\n\t\t\t\t}, false/*not extractable*/, [ \"sign\" ])/*= key*/\n\t\t\t)\n\t\t\t: key;\n\t}\n\t\n\t// calculateSeed takes ~ 3.000ms to complete + the time of calculateKey once\n\tcalculateSeed(site, counter = 1, context = null, NS = MPW.NS) {\n\t\tif (!site) {\n\t\t\treturn Promise.reject(new Error(\"Argument site not present\"));\n\t\t}\n\t\t\n\t\tif (counter < 1 || counter > 4294967295/*Math.pow(2, 32) - 1*/) {\n\t\t\treturn Promise.reject(new Error(\"Argument counter out of range\"));\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// Cache the number of characters in site for older buggy\n\t\t\t// versions of MPW\n\t\t\tlet siteCharLength = site.length;\n\t\t\t\n\t\t\t// Convert salt string to a Uint8Array w/ UTF-8\n\t\t\tsite = MPW.txtencoder.encode(site);\n\t\t\t\n\t\t\t// Convert NS string to a Uint8Array w/ UTF-8\n\t\t\tNS = MPW.txtencoder.encode(NS);\n\t\t\t\n\t\t\tif (context) {\n\t\t\t\t// Convert context string to a Uint8Array w/ UTF-8\n\t\t\t\tcontext = MPW.txtencoder.encode(context);\n\t\t\t}\n\t\t\t\n\t\t\t// Create data array and a DataView representing it\n\t\t\tvar data = new Uint8Array(\n\t\t\t\tNS.length\n\t\t\t\t+ 4/*sizeof(uint32)*/ + site.length\n\t\t\t\t+ 4/*sizeof(int32)*/\n\t\t\t\t+ (context\n\t\t\t\t\t? 4/*sizeof(uint32)*/ + context.length\n\t\t\t\t\t: 0)\n\t\t\t);\n\t\t\tlet dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\t\t\tlet i = 0;\n\t\t\t\n\t\t\t// Set data[0,] to NS\n\t\t\tdata.set(NS, i); i += NS.length;\n\t\t\t\n\t\t\tif (this.version < 2) {\n\t\t\t\t// Set data[i,i+4] to siteCharLength UINT32 in big-endian form\n\t\t\t\tdataView.setUint32(i, siteCharLength, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t} else {\n\t\t\t\t// Set data[i,i+4] to site.length UINT32 in big-endian form\n\t\t\t\tdataView.setUint32(i, site.length, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t}\n\t\t\t\n\t\t\t// Set data[i,] to site\n\t\t\tdata.set(site, i); i += site.length;\n\t\t\t\n\t\t\t// Set data[i,i+4] to counter INT32 in big-endian form\n\t\t\tdataView.setInt32(i, counter, false/*big-endian*/); i += 4/*sizeof(int32)*/;\n\t\t\t\n\t\t\tif (context) {\n\t\t\t\t// Set data[i,i+4] to context.length UINT32 in big-endian form\n\t\t\t\tdataView.setUint32(i, context.length, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t\t\n\t\t\t\t// Set data[i,] to context\n\t\t\t\tdata.set(context, i); i += context.length;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t\t\n\t\t// If the Web Crypto API is supported use it, otherwise rely on crypto-js\n\t\tif (window.crypto.subtle) {\n\t\t\treturn this.key.then(\n\t\t\t\t// Sign data using HMAC-SHA-256 w/ this.key\n\t\t\t\tkey => window.crypto.subtle.sign({\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t}\n\t\t\t\t}, key, data)/*= seed*/\n\t\t\t).then(\n\t\t\t\t// Convert the seed to Uint8Array from ArrayBuffer\n\t\t\t\tseed => new Uint8Array(seed)/*= seed*/\n\t\t\t);\n\t\t} else {\n\t\t\treturn this.key.then(function (key) {\n\t\t\t\t// Create crypto-js WordArrays from Uint8Arrays data and key\n\t\t\t\tdata = CryptoJS.lib.WordArray.create(data);\n\t\t\t\tkey  = CryptoJS.lib.WordArray.create(key);\n\t\t\t\t\n\t\t\t\t// Sign data using HMAC-SHA-256 w/ key\n\t\t\t\treturn CryptoJS.HmacSHA256(data, key)/*= seed*/;\n\t\t\t}).then(function (hash) {\n\t\t\t\t// Create seed array and a DataView representing it\n\t\t\t\tlet seed     = new Uint8Array(hash.words.length * 4/*sizeof(int32)*/);\n\t\t\t\tlet seedView = new DataView(seed.buffer, seed.byteOffset, seed.byteLength);\n\t\t\t\t\n\t\t\t\t// Loop over hash.words which are INT32\n\t\t\t\tfor (let i = 0; i < hash.words.length; i++) {\n\t\t\t\t\t// Set seed[i*4,i*4+4] to hash.words[i] INT32 in big-endian form\n\t\t\t\t\tseedView.setInt32(i * 4/*sizeof(int32)*/, hash.words[i], false/*big-endian*/);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Return the seed Uint8Array\n\t\t\t\treturn seed;\n\t\t\t});\n\t\t}\n\t}\n\t\n\t// generate takes ~ 0.200ms to complete + the time of calculateSeed\n\tgenerate(site, counter = 1, context = null, template = \"long\", NS = MPW.NS) {\n\t\t// Does the requested template exist?\n\t\tif (!(template in MPW.templates)) {\n\t\t\treturn Promise.reject(new Error(\"Argument template invalid\"));\n\t\t}\n\t\t\n\t\t// Calculate the seed\n\t\tlet seed = this.calculateSeed(site, counter, context, NS);\n\t\t\n\t\tif (this.version < 1) {\n\t\t\t// Convert seed from host byte order to network byte\n\t\t\t// to be compatible with v0 of MPW\n\t\t\t// Follows the implementation at https://github.com/...\n\t\t\t// Lyndir/MasterPassword/blob/master/MasterPassword/...\n\t\t\t// Java/masterpassword-algorithm/src/main/java/com/...\n\t\t\t// lyndir/masterpassword/MasterKeyV0.java#L105\n\t\t\tseed = seed.then(function (seedBytes) {\n\t\t\t\tlet seed = new Uint16Array(seedBytes.length);\n\t\t\t\t\n\t\t\t\tfor (let i = 0; i < seed.length; i++) {\n\t\t\t\t\tseed[i] = (seedBytes[i] > 127 ? 0x00ff : 0x0000) | (seedBytes[i] << 8);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn seed;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn seed.then(function (seed) {\n\t\t\t// Find the selected template array\n\t\t\ttemplate = MPW.templates[template];\n\t\t\t\n\t\t\t// Select the specific template based on seed[0]\n\t\t\ttemplate = template[seed[0] % template.length];\n\t\t\t\n\t\t\t// Split the template string (e.g. xxx...xxx)\n\t\t\treturn template.split(\"\").map(function (c, i) {\n\t\t\t\t// Use MPW.passchars to map the template string (e.g. xxx...xxx)\n\t\t\t\t// to characters (e.g. c -> bcdfghjklmnpqrstvwxyz)\n\t\t\t\tlet chars = MPW.passchars[c];\n\t\t\t\t\n\t\t\t\t// Select the character using seed[i + 1]\n\t\t\t\treturn chars[seed[i + 1] % chars.length];\n\t\t\t}).join(\"\");\n\t\t})/*= password*/;\n\t}\n\t\n\t// generate a password with the password namespace\n\tgenerateAuthentication(site, counter = 1, context = \"\", template = \"long\") {\n\t\treturn this.generate(site, counter, context, template, MPW.AuthenticationNS);\n\t}\n\t\n\t// generate a username with the login namespace\n\tgenerateIdentification(site, counter = 1, context = \"\", template = \"name\") {\n\t\treturn this.generate(site, counter, context, template, MPW.IdentificationNS);\n\t}\n\t\n\t// generate a security answer with the answer namespace\n\tgenerateRecovery(site, counter = 1, context = \"\", template = \"phrase\") {\n\t\treturn this.generate(site, counter, context, template, MPW.RecoveryNS);\n\t}\n\t\n\t// generate a password with the password namespace\n\t//\n\t// Deprecated: use generateAuthentication instead.\n\tgeneratePassword(site, counter = 1, template = \"long\") {\n\t\treturn this.generate(site, counter, null, template, MPW.PasswordNS);\n\t}\n\t\n\t// generate a username with the login namespace\n\t//\n\t// Deprecated: use generateIdentification instead.\n\tgenerateLogin(site, counter = 1, template = \"name\") {\n\t\treturn this.generate(site, counter, null, template, MPW.LoginNS);\n\t}\n\t\n\t// generate a security answer with the answer namespace\n\t//\n\t// Deprecated: use generateRecovery instead.\n\tgenerateAnswer(site, counter = 1, context = \"\", template = \"phrase\") {\n\t\treturn this.generate(site, counter, context, template, MPW.AnswerNS);\n\t}\n\t\n\tinvalidate() {\n\t\t// Replace this.key w/ a Promise.reject\n\t\t// Preventing all future access\n\t\tthis.key = Promise.reject(new Error(\"invalid state\"));\n\t}\n\t\n\tstatic test() {\n\t\t// Pretty simple test here\n\t\treturn new MPW(\"user\", \"password\").generate(\"example.com\", 1, null, \"long\", MPW.NS).then(function (password) {\n\t\t\tconsole.assert(password === \"ZedaFaxcZaso9*\", `Self-test failed; expected: ZedaFaxcZaso9*; got: ${password}`);\n\t\t\treturn password === \"ZedaFaxcZaso9*\"\n\t\t\t\t? Promise.resolve()\n\t\t\t\t: Promise.reject(new Error(`Self-test failed; expected: ZedaFaxcZaso9*; got: ${password}`));\n\t\t});\n\t}\n}\n\n// A TextEncoder in UTF-8 to convert strings to `Uint8Array`s\nMPW.txtencoder = new TextEncoder;\n\n// The latest version of MPW supported\nMPW.VERSION = 3;\n\n// The namespace used in calculateKey\nMPW.NS = \"com.lyndir.masterpassword\";\n\n// The namespaces used in calculateSeed\nMPW.AuthenticationNS = \"com.lyndir.masterpassword\";\nMPW.IdentificationNS = \"com.lyndir.masterpassword.login\";\nMPW.RecoveryNS       = \"com.lyndir.masterpassword.answer\";\n\n// Legacy namespaces used in calculateSeed\nMPW.PasswordNS = MPW.AuthenticationNS;\nMPW.LoginNS    = MPW.IdentificationNS;\nMPW.AnswerNS   = MPW.RecoveryNS;\n\n// The templates that passwords may be created from\n// The characters map to MPW.passchars\nMPW.templates = {\n\tmaximum: [\n\t\t\"anoxxxxxxxxxxxxxxxxx\",\n\t\t\"axxxxxxxxxxxxxxxxxno\"\n\t],\n\tlong: [\n\t\t\"CvcvnoCvcvCvcv\",\n\t\t\"CvcvCvcvnoCvcv\",\n\t\t\"CvcvCvcvCvcvno\",\n\t\t\"CvccnoCvcvCvcv\",\n\t\t\"CvccCvcvnoCvcv\",\n\t\t\"CvccCvcvCvcvno\",\n\t\t\"CvcvnoCvccCvcv\",\n\t\t\"CvcvCvccnoCvcv\",\n\t\t\"CvcvCvccCvcvno\",\n\t\t\"CvcvnoCvcvCvcc\",\n\t\t\"CvcvCvcvnoCvcc\",\n\t\t\"CvcvCvcvCvccno\",\n\t\t\"CvccnoCvccCvcv\",\n\t\t\"CvccCvccnoCvcv\",\n\t\t\"CvccCvccCvcvno\",\n\t\t\"CvcvnoCvccCvcc\",\n\t\t\"CvcvCvccnoCvcc\",\n\t\t\"CvcvCvccCvccno\",\n\t\t\"CvccnoCvcvCvcc\",\n\t\t\"CvccCvcvnoCvcc\",\n\t\t\"CvccCvcvCvccno\"\n\t],\n\tmedium: [\n\t\t\"CvcnoCvc\",\n\t\t\"CvcCvcno\"\n\t],\n\tbasic: [\n\t\t\"aaanaaan\",\n\t\t\"aannaaan\",\n\t\t\"aaannaaa\"\n\t],\n\tshort: [\n\t\t\"Cvcn\"\n\t],\n\tpin: [\n\t\t\"nnnn\"\n\t],\n\tname: [\n\t\t\"cvccvcvcv\"\n\t],\n\tphrase: [\n\t\t\"cvcc cvc cvccvcv cvc\",\n\t\t\"cvc cvccvcvcv cvcv\",\n\t\t\"cv cvccv cvc cvcvccv\"\n\t]\n};\n\n// The password character mapping\n// c in template becomes bcdfghjklmnpqrstvwxyz\nMPW.passchars = {\n\tV: \"AEIOU\",\n\tC: \"BCDFGHJKLMNPQRSTVWXYZ\",\n\tv: \"aeiou\",\n\tc: \"bcdfghjklmnpqrstvwxyz\",\n\tA: \"AEIOUBCDFGHJKLMNPQRSTVWXYZ\",\n\ta: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\",\n\tn: \"0123456789\",\n\to: \"@&%?,=[]_:-+*$#!'^~;()/.\",\n\tx: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz0123456789!@#$%^&*()\",\n\t\" \": \" \"\n};\n"]}