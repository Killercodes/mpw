{"version":3,"file":"/home/tom/git/mpw-js/es5/scrypt.js","sources":["/home/tom/git/mpw-js/scrypt.js","@traceur/generated/TemplateParser/0"],"names":[],"mappings":"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","sourceRoot":"/home/tom/git/mpw-js/es5/","sourcesContent":["/*! by Tom Thorogood <me@tomthorogood.co.uk> */\n/*! This work is licensed under the Creative Commons Attribution 4.0\nInternational License. To view a copy of this license, visit\nhttp://creativecommons.org/licenses/by/4.0/ or see LICENSE. */\n\nwindow.scrypt = function () {\n\t// 512MiB, the default 32MiB caused errors for unknown reasons\n\tconst SCRYPT_MEMORY = 512 * 1024 * 1024;\n\t\n\tif (window.Worker) {\n\t\t// Get all the <script> tags the latest one is used to resolve\n\t\t// scrypt-asm.js, it will be the currently executing <script> tag,\n\t\t// so long as defer and async were NOT used\n\t\tlet scripts = document.getElementsByTagName(\"script\");\n\t\t\n\t\t// The src of the worker\n\t\tlet wrkrsrc =\n`// Import scrypt-asm.js which is scrypt.c compiled w/ Emscripten\nimportScripts(\"${window.SCRYPTASM_PATH || `${scripts[scripts.length - 1].src}/../scrypt-asm.js`}\");\n\n// Create the Emscripten factory\nvar scrypt_module = scrypt_module_factory(${SCRYPT_MEMORY});\n\n// Wait for incoming messages\n// Pull out the needed values from the e argument\nthis.addEventListener(\"message\", function (e) {\n\ttry {\n\t\t// Invoke the Emscripten compiled crypto_scrypt routine\n\t\tvar data = scrypt_module.crypto_scrypt(e.data.passwd, e.data.salt, e.data.n, e.data.r, e.data.p, e.data.buflen);\n\t\t\n\t\t// Send the data back to the DOM transferring ownership\n\t\t// of data to the DOM\n\t\tthis.postMessage({\n\t\t\tid: e.data.id,\n\t\t\t\n\t\t\tdata: data\n\t\t}, [ data.buffer ]);\n\t} catch(err) {\n\t\t// Send the error back to the DOM\n\t\tthis.postMessage({\n\t\t\tid: e.data.id,\n\t\t\t\n\t\t\terr: err\n\t\t});\n\t}\n}, false);`;\n\t\t\n\t\tif (window.URL && window.Blob) {\n\t\t\t// Create a blob: url to contain wrkrsrc\n\t\t\tvar url = URL.createObjectURL(new Blob([ wrkrsrc ], { type: \"application/javascript\" }));\n\t\t} else {\n\t\t\t// Create a data: url to contain wrkrsrc\n\t\t\tvar url = `data:application/javascript;charset=utf-8,${encodeURIComponent(wrkrsrc)}`;\n\t\t}\n\t\t\n\t\t// A unique id to ensure that ONLY valid messages are accepted\n\t\tlet messageName = `scrypt-${Math.random()}`.replace(\"0.\", \"\");\n\t\t\n\t\t// This is the scrypt function\n\t\t// It returns a promise which will resolve when the worker responds\n\t\treturn (passwd, salt, n, r, p, buflen) => new Promise(function (resolve, reject) {\n\t\t\t// Create a WebWorker using a blob: url\n\t\t\tlet scryptWorker = new Worker(url);\n\t\t\t\n\t\t\t// Add a message event listener for worker responses\n\t\t\t// Pull out the needed values from the e argument\n\t\t\tscryptWorker.addEventListener(\"message\", function workerListener({data: {id, data, err}}) {\n\t\t\t\t// Check the name is valid, if it's not we didn't send it\n\t\t\t\tif (id === messageName) {\n\t\t\t\t\t// If we were sent data it didn't throw an error, if not...\n\t\t\t\t\tdata ? resolve(data) : reject(err);\n\t\t\t\t\t\n\t\t\t\t\t// Remove the message listener from the worker\n\t\t\t\t\t// in preparation of garbage collection\n\t\t\t\t\tscryptWorker.removeEventListener(\"message\", workerListener);\n\t\t\t\t\t\n\t\t\t\t\t// Remove reference to worker\n\t\t\t\t\tscryptWorker = null;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Send the worker a message w/ the message id and all arguments,\n\t\t\t// transferring ownership of passwd and salt to the worker\n\t\t\tscryptWorker.postMessage({\n\t\t\t\tid: messageName,\n\t\t\t\t\n\t\t\t\tpasswd: passwd,\n\t\t\t\tsalt: salt,\n\t\t\t\tn: n,\n\t\t\t\tr: r,\n\t\t\t\tp: p,\n\t\t\t\tbuflen: buflen\n\t\t\t}, [ passwd.buffer, salt.buffer ]);\n\t\t});\n\t} else {\n\t\t// This will hold the Emscripten factory\n\t\tlet scrypt_module = null;\n\t\t\n\t\t// Create a new async script tag to add to the DOM\n\t\t// This will 'import' scrypt_module_factory\n\t\tlet script = document.createElement(\"script\");\n\t\tscript.src = window.SCRYPTASM_PATH || \"scrypt-asm.js\", script.async = true;\n\t\t\n\t\t// Add an event handler to the script load event to\n\t\t// create the factory as soon as we possibly can\n\t\tscript.addEventListener(\"load\", function () {\n\t\t\t// Only if it hasn't already been created\n\t\t\tif (!scrypt_module) {\n\t\t\t\t// Create the factory\n\t\t\t\tscrypt_module = scrypt_module_factory(SCRYPT_MEMORY);\n\t\t\t}\n\t\t}, false);\n\t\t\n\t\t// Add the script tag to the DOM\n\t\t// This begins loading scrypt-asm.js\n\t\tdocument.body.appendChild(script);\n\t\t\n\t\t// This is the scrypt function\n\t\t// It returns a promise which will resolve asynchronously\n\t\treturn (passwd, salt, n, r, p, buflen) => new Promise(function (resolve, reject) {\n\t\t\t// setImmediate (a 0-delay setTimeout of sorts) is needed\n\t\t\t// here so that this code is asynchronous and will not block\n\t\t\t// the UI thread\n\t\t\twindow.setImmediate(function () {\n\t\t\t\t// If the factory hasn't been created yet (the load event didn't fire)\n\t\t\t\t// we create it here, if it has loaded that is\n\t\t\t\tif (!scrypt_module) {\n\t\t\t\t\t// Has scrypt-asm.js been loaded yet?\n\t\t\t\t\tif (!window.scrypt_module_factory) {\n\t\t\t\t\t\treturn reject(new Error(\"scrypt-asm.js not loaded\"));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Create the factory\n\t\t\t\t\tscrypt_module = scrypt_module_factory(SCRYPT_MEMORY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Invoke the Emscripten compiled crypto_scrypt routine\n\t\t\t\t// resolving the promise w/ the result\n\t\t\t\tresolve(scrypt_module.crypto_scrypt(passwd, salt, n, r, p, buflen));\n\t\t\t});\n\t\t});\n\t}\n}();\n","$__placeholder__0[$traceurRuntime.toProperty($__placeholder__1)]"]}